# -*- coding: utf-8 -*-
"""SignLanguageClassificationFinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YwTkHuO_auDcVCqN1LCwa5KnF_8kmZ73
"""

!pip install tensorflow==2.0.0-alpha0

from google.colab import drive
drive.mount("/content/drive")

ls

ls "/content/drive/My Drive/Colab Notebooks/"

train_file = "/content/drive/My Drive/Colab Notebooks/trainNew.zip"

import zipfile
with zipfile.ZipFile(train_file, 'r') as z:
  z.extractall()

ls

import os
import cv2

def load_image(file_path):
    return cv2.imread(file_path)

def extract_label(file_name):
    if "can" in file_name:
      return 1
    elif "excuse me" in file_name:
      return 2
    elif "find" in file_name:
      return 3
    elif "how" in file_name:
      return 4
    elif "how much" in file_name:
      return 5
    elif "me" in file_name:
      return 6
    elif "much" in file_name:
      return 7
    elif "return" in file_name:
      return 8
    elif "say again" in file_name:
      return 9
    elif "where" in file_name:
      return 10                      
    else:
      return 0 

    # return 1 if "can" in file_name else 0  

train_path = "./trainNew/"
image_files = os.listdir(train_path)
train_images = [load_image(train_path + file) for file in image_files]
train_labels = [extract_label(file) for file in image_files]

def preprocess_image(img, side=96):
    min_side = min(img.shape[0], img.shape[1])
    img = img[:min_side, :min_side]
    img = cv2.resize(img, (side,side))
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    return img / 255.0

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

preview_index = 740
plt.subplot(1,2,1)
plt.imshow(train_images[preview_index])
plt.subplot(1,2,2)
plt.imshow(preprocess_image(train_images[preview_index]), cmap="gray")

for i in range(len(train_images)):
    train_images[i] = preprocess_image(train_images[i])

import numpy as np

train_images = np.expand_dims(train_images, axis=-1)
train_labels = np.array(train_labels)
print(train_images.shape, train_labels.shape)

import tensorflow as tf
print("Tensorflow:", tf.__version__)

layers = [
    tf.keras.layers.Conv2D(filters=16, kernel_size=(3,3), padding="same", activation=tf.nn.relu, input_shape=train_images.shape[1:]),
    tf.keras.layers.MaxPool2D(pool_size=(2,2), strides=(2,2)),
    tf.keras.layers.Conv2D(filters=32, kernel_size=(3,3), padding="same", activation=tf.nn.relu),
    tf.keras.layers.MaxPool2D(pool_size=(2,2), strides=(2,2)),
    tf.keras.layers.Conv2D(filters=64, kernel_size=(3,3), padding="same", activation=tf.nn.relu),
    tf.keras.layers.MaxPool2D(pool_size=(2,2), strides=(2,2)),
    tf.keras.layers.Conv2D(filters=128, kernel_size=(3,3), padding="same", activation=tf.nn.relu),
    tf.keras.layers.MaxPool2D(pool_size=(2,2), strides=(2,2)),
    tf.keras.layers.Conv2D(filters=256, kernel_size=(3,3), padding="same", activation=tf.nn.relu),
    tf.keras.layers.MaxPool2D(pool_size=(2,2), strides=(2,2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(units=512, activation=tf.nn.relu),
    tf.keras.layers.Dense(units=256, activation=tf.nn.relu),
    tf.keras.layers.Dense(units=11, activation=tf.nn.softmax)
]

model = tf.keras.Sequential(layers)
model.compile(optimizer=tf.optimizers.Adam(),
              loss=tf.losses.SparseCategoricalCrossentropy(),
              metrics=[tf.metrics.SparseCategoricalAccuracy()])
model.fit(train_images, train_labels, epochs=5, batch_size=50)
model.save_weights("model.tf")

from google.colab import files
uploads = files.upload()

ls

uploads.keys()

eval_images = [preprocess_image(load_image(file)) for file in uploads.keys()]
eval_model = tf.keras.Sequential(layers)
eval_model.load_weights("model.tf")
eval_predictions = eval_model.predict(np.expand_dims(eval_images, axis=-1))

cols = 4
rows = np.ceil(len(eval_images)/cols)
fig = plt.gcf()
fig.set_size_inches(cols * 4, rows * 4)
for i in range(len(eval_images)):
    plt.subplot(rows, cols, i+1)
    plt.imshow(eval_images[i], cmap="gray")
    if np.argmax(eval_predictions[i])==1:
      plt.title("Can" if np.argmax(eval_predictions[i])==1 else "Other")
    elif np.argmax(eval_predictions[i])==2:
      plt.title("excuse me" if np.argmax(eval_predictions[i])==2 else "Other")
    elif np.argmax(eval_predictions[i])==3:
      plt.title("find" if np.argmax(eval_predictions[i])==3 else "Other")
    elif np.argmax(eval_predictions[i])==4:
      plt.title("how" if np.argmax(eval_predictions[i])==4 else "Other")
    elif np.argmax(eval_predictions[i])==5:
      plt.title("how much" if np.argmax(eval_predictions[i])==5 else "Other")
    elif np.argmax(eval_predictions[i])==6:
      plt.title("me" if np.argmax(eval_predictions[i])==6 else "Other")
    elif np.argmax(eval_predictions[i])==7:
      plt.title("much" if np.argmax(eval_predictions[i])==7 else "Other")
    elif np.argmax(eval_predictions[i])==8:
      plt.title("return" if np.argmax(eval_predictions[i])==8 else "Other")
    elif np.argmax(eval_predictions[i])==9:
      plt.title("say again" if np.argmax(eval_predictions[i])==9 else "Other")
    elif np.argmax(eval_predictions[i])==10:
      plt.title("Where" if np.argmax(eval_predictions[i])==10 else "Other")                      
    plt.axis('off')

ls

files.download("model.tf.index")